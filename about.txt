Простой API для управления задачами (Todo List API)

•  Описание: Классический проект, но можно сделать его аккуратным и хорошо протестированным. Пользователь может создавать, читать, обновлять и удалять задачи.
•  Функциональность:
  •  GET /todos: Получение списка всех задач.
  •  GET /todos/{id}: Получение задачи по ID.
  •  POST /todos: Создание новой задачи (заголовок, описание, статус выполнения).
  •  PUT /todos/{id}: Обновление существующей задачи.
  •  DELETE /todos/{id}: Удаление задачи.
•  Что демонстрирует:
  •  CRUD операции (Create, Read, Update, Delete)
  •  Работа с базами данных PostgreSQL (подключение, запросы).
  •  Валидация данных (использование Pydantic для проверки входящих данных).
  •  Обработка ошибок (возвращение соответствующих HTTP кодов ошибок).
  •  (Плюс) Unit-тесты.

•  Используйте асинхронность:
FastAPI разработан для асинхронного кода. Используйте async def для ваших функций, чтобы показать понимание асинхронного
программирования. Для работы с PostgreSQL в асинхронном режиме, используйте библиотеку asyncpg или databases.
•  ORM/ODM (SQLAlchemy или Databases): Используйте объектно-реляционное отображение (ORM) или объектно-документное отображение
(ODM) для взаимодействия с PostgreSQL. SQLAlchemy (SQLAlchemy Core или SQLAlchemy ORM)
•  Валидация с Pydantic: Pydantic позволяет определять модели данных с проверками типов. Используйте его для валидации входящих данных и сериализации данных для ответов API.
•  Обработка ошибок: Реализуйте обработку ошибок и возвращайте соответствующие HTTP-коды ошибок (например, 400 Bad Request, 404 Not Found).
•  Unit-тесты (pytest): Напишите unit-тесты для ваших API-эндпоинтов. Это покажет, что вы умеете тестировать свой код.
•  Документация: FastAPI автоматически генерирует интерактивную документацию Swagger/OpenAPI. Воспользуйтесь этим, чтобы продемонстрировать, как использовать ваш API.
•  Dockerize: Создайте Dockerfile для вашего проекта. Это позволит легко развернуть его на любой платформе.
•  README.md: Напишите хороший файл README.md, в котором объясните, что делает проект, как его запустить и как его протестировать.
•  Читстый код: Соблюдайте PEP 8.
•  Сделайте код доступным (GitHub): Разместите свой проект на GitHub.

Проект:
Пользователи имеют возможность авторизации/регистрации, после этого они могут выкладывать свои таски на сайт, удалять их,
редактировать статусы своих тасок. Админ имеет право удалять и редактировать все.
Возможность парного общения между пользователями, обмен файлами в том числе

todo:
1. Авторизация/регистрация. Рассмотреть подходы AuthX и FastAPI Users
2. CRUD операции над своими тасками для пользователей и для админа
3.
